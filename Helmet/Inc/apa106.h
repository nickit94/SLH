#ifndef APA106_H_
#define APA106_H_

#include <main.h>

#define APA106_NUM_CHANNELS		13

#define APA106_CH0_NUM_PIXEL	29													// Левый спираль внутренняя
#define APA106_CH1_NUM_PIXEL	33													// Левый спираль средняя
#define APA106_CH2_NUM_PIXEL	40													// Левый спираль внешняя
#define APA106_CH3_NUM_PIXEL	13													// Левый
#define APA106_CH4_NUM_PIXEL	12													// Левый
#define APA106_CH5_NUM_PIXEL	12													// Левый
#define APA106_CH6_NUM_PIXEL	12													// Центральный
#define APA106_CH7_NUM_PIXEL	12													// Правый
#define APA106_CH8_NUM_PIXEL	12													// Правый
#define APA106_CH9_NUM_PIXEL	13													// Правый
#define APA106_CH10_NUM_PIXEL	40													// Правый спираль внешняя
#define APA106_CH11_NUM_PIXEL	33													// Правый спираль средняя
#define APA106_CH12_NUM_PIXEL	28													// Правый спираль внутренняя

#define APA106_BUF_CH0_SIZE		(APA106_SIZE_RESET + APA106_CH0_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 1 ЛЕВЫЙ СПИРАЛЬ ВНУТРЕННЯЯ
#define APA106_BUF_CH1_SIZE 	(APA106_SIZE_RESET + APA106_CH1_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 2 ЛЕВЫЙ СПИРАЛЬ СРЕДНЯЯ
#define APA106_BUF_CH2_SIZE		(APA106_SIZE_RESET + APA106_CH2_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 3 ЛЕВЫЙ СПИРАЛЬ ВНЕШНЯЯ
#define APA106_BUF_CH3_SIZE		(APA106_SIZE_RESET + APA106_CH3_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 4 ЛЕВЫЙ
#define APA106_BUF_CH4_SIZE		(APA106_SIZE_RESET + APA106_CH4_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 5 ЛЕВЫЙ
#define APA106_BUF_CH5_SIZE		(APA106_SIZE_RESET + APA106_CH5_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 6 ЛЕВЫЙ
#define APA106_BUF_CH6_SIZE		(APA106_SIZE_RESET + APA106_CH6_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 7 ЦЕНТР
#define APA106_BUF_CH7_SIZE		(APA106_SIZE_RESET + APA106_CH7_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 8 ПРАВЫЙ
#define APA106_BUF_CH8_SIZE		(APA106_SIZE_RESET + APA106_CH8_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 9 ПРАВЫЙ
#define APA106_BUF_CH9_SIZE		(APA106_SIZE_RESET + APA106_CH9_NUM_PIXEL * 24)		// Размер буфера для DMA Канал 10 ПРАВЫЙ
#define APA106_BUF_CH10_SIZE	(APA106_SIZE_RESET + APA106_CH10_NUM_PIXEL * 24)	// Размер буфера для DMA Канал 11 ПРАВЫЙ СПИРАЛЬ ВНЕШНЯЯ
#define APA106_BUF_CH11_SIZE	(APA106_SIZE_RESET + APA106_CH11_NUM_PIXEL * 24)	// Размер буфера для DMA Канал 12 ПРАВЫЙ СПИРАЛЬ СРЕДНЯЯ
#define APA106_BUF_CH12_SIZE	(APA106_SIZE_RESET + APA106_CH12_NUM_PIXEL * 24)	// Размер буфера для DMA Канал 13 ПРАВЫЙ СПИРАЛЬ ВНУТРЕННЯЯ

#define APA106_SIZE_RESET 		   48												// Кол-вом пустых байт задаем задержку RESET для изменения данных
#define APA106_HIGH       		   99//65											// Число, обозначающее лог. 1
#define APA106_LOW        		   24//26											// Число, обозначающее лог. 0
#define APA106_MAX_BRIGHT 		   255												// Максимальная яркость по сумме трех цветов, 20 мА на светодиол
#define APA106_TIMER_AAR 		   122//0x0059										// Период следования бит в тиках таймера - должно быть 1.25 мкс
#define APA106_MAX_STEP_BRIGHTNESS 11												// Кол-во шагов яркости

extern uint8_t apa106_cur_ind_bright;

void apa106_init();
void apa106_send(uint8_t led_channel);
void apa106_clear_buf(uint8_t led_channel);
void apa106_set_pixel(uint8_t num_channel, uint16_t num_pixel, uint8_t red, uint8_t green, uint8_t blue);

void apa106_start_update();
void apa106_update();


static const uint8_t Apa106CorrectTable[] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10,
		10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21,
		22, 23, 23, 24, 24, 25, 26, 26, 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37, 38,
		38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58,
		59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84,
		85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111,
		112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 126, 127, 128, 130, 131, 133, 134, 136, 137,
		139, 140, 142, 143, 145, 146, 148, 149, 151, 152, 154, 155, 157, 158, 160, 162, 163, 165, 166,
		168, 170, 171, 173, 175, 176, 178, 180, 181, 183, 185, 186, 188, 190, 192, 193, 195, 197, 199,
		200, 202, 204, 206, 207, 209, 211, 213, 215, 217, 218, 220, 222, 224, 226, 228, 230, 232, 233,
		235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255
};
/***********************************************************************************************************************/


/************************************ ИНИЦИАЛИЗАЦИЯ *********************************************
 * НАСТРОЙКА КАНАЛОВ ТАЙМЕРА
 *
 * TIMx->CCER |= TIM_CCER_CCxE 							- Выход канала захвата/сравнения включен
 * TIMx->CCER &= ~TIM_CCER_CCxP 						- Сделать текущий канал неинверсным
 * TIMx->CCMRn |= TIM_CCMR1_OCxM_2 | TIM_CCMR1_OCxM_1 	- Сделать текущий канал PWM mode 1 (n = 1..2, x = 1..4)
 * TIMx->CCMRn |= TIM_CCMR1_OCxPE 						- Включен режим предварительной загрузки регистра сравнения
 * TIMx->CR1 |= TIMCR1_ARPE 							- Включен режим предварительной записи регистра автоперезагрузки
 * TIMx->DIER |= TIM_DIER_CCxDE							- Разрешить для текущего канала запрос DMA
 *
 **************************************************************************************************
 * НАСТРОЙКА DMA
 *
 * DMA1_Channelx->CPAR = (uint32_t)(&TIMx->CCRx) 		- Куда пишем (переферия - номер таймера, номер канала)
 * DMA1_Channelx->CMAR = (uint32_t)(buffer) 			- Откуда берем (память - буфер)
 * DMA1_Channelx->CCR = DMA_CCR_PSIZE_0 |				- 01: 16 бит переферия
 *						DMA_CCR_MINC	|				- Инкрементирование указателя памяти
 *						DMA_CCR_DIR						- Напраление чтения из памяти в переферию
 * NVIC_EnableIRQ(DMA1_Channelx_IRQn) - Разрешение прерывания от DMA по окончанию передачи
 *
 **************************************************************************************************/

/************************************ ЗАПУСК *********************************************
 * ОТКЛЮЧЕНИЕ DMA
 *
 * DMA1_Channelx->CCR &= ~(DMA_CCR_EN) 					- Отключаем канал DMA
 * DMA1->IFCR = DMA_IFCR_CTEIFx | 						- Очистить прерывание ошибки отправки канала x
 * 				DMA_IFCR_CHTIFx |						- Очистить прерывание половины отправки канала x
 *				DMA_IFCR_CTCIFx |						- Очистить прерывание завершения отправки канала x
 *				DMA_IFCR_CGIFx							- Очистить глобальные прерывания канала x
 *
 * ВКЛЮЧЕНИЕ DMA
 *
 * DMA1_Channelx->CNDTR = sizeof(buffer)				- Устанавливаем количество данных (размер буфера)
 * DMA1_Channelx->CCR |= DMA_CCR_TCIE 					- Назначить прерывание завершения передачи
 * DMA1_Channelx->CCR |= DMA_CCR_EN						- Включаем канал DMA, тем самым начинаем передачу данных
 *
 ****************************************************************************************
 * ЗАПУСК ТАЙМЕРА
 *
 * TIMx->CR1 |= TIM_CR_CEN 								- Запуск таймера
 * TIMx->ARR  											- Установка периода (До куда считать таймеру)
 * TIMx->CNT 											- Счетный регистр
 * TIMx->CCRx 											- Значение ШИМ на текущем канале
 * TIMx->DIER |= TIM_DIER_UIE 							- Прерывание по обновлению
 * TIMx->SR |= TIM_SR_UIF 								- Установить флаг прерывания
 * NVIC_EnableIRQ(TIMx_IRQn) 							- Разрешение прерывания от таймера
 *
 *
 **************************************************************************************************/

/**************************************************************************************************
 * ВЫХОДЫ ТАЙМЕРОВ
 *
 * --- ЛЕВОЕ ПОЛУШАРИЕ ---
 * TIM1_CH1 - 0	 - Б
 * TIM1_CH2 - 1  - Б
 * TIM1_CH3 - 2  - Б
 * TIM1_CH4 - 3  - М
 * TIM4_CH1 - 4  - М
 * TIM4_CH2 - 5  - М
 *
 * --- ПРАВОЕ ПОЛУШАРИЕ ---
 * TIM2_CH1 - 6  - М
 * TIM2_CH2 - 7  - М
 * TIM2_CH3 - 8  - М
 * TIM2_CH4 - 9  - М
 * TIM3_CH1 - 10 - Б
 * TIM3_CH3 - 11 - Б
 * TIM3_CH4 - 12 - Б
 *
 **************************************************************************************************/

#endif
